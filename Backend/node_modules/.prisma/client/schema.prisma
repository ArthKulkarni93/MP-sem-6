generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UniversityTable {
  id       Int            @id @default(autoincrement())
  name     String
  address  String
  branches BranchTable[]
  students StudentTable[]
  teachers TeacherTable[]
  years    YearTable[]
  notes    NotesTable[]
}

model BranchTable {
  id           Int             @id @default(autoincrement())
  Branchcode   String
  Branchname   String
  universityId Int
  university   UniversityTable @relation(fields: [universityId], references: [id])
  students     StudentTable[]
  teachers     TeacherTable[]
  tests        TestTable[]
  years        YearTable[]
  notes        NotesTable[]
}

model YearTable {
  id           Int    @id @default(autoincrement())
  name         String
  year         Int
  universityId Int // Foreign key to UniversityTable
  branchId     Int // Foreign key to BranchTable

  university UniversityTable @relation(fields: [universityId], references: [id])
  branch     BranchTable     @relation(fields: [branchId], references: [id])

  students StudentTable[]
  tests    TestTable[]
  notes    NotesTable[]
}

model StudentTable {
  id           Int                    @id @default(autoincrement())
  firstname    String
  lastname     String
  email        String                 @unique
  password     String
  PRN          String
  branchId     Int
  universityId Int
  yearId       Int
  branch       BranchTable            @relation(fields: [branchId], references: [id])
  university   UniversityTable        @relation(fields: [universityId], references: [id])
  year         YearTable              @relation(fields: [yearId], references: [id])
  results      ResultTable[]
  responses    StudentResponseTable[]
}

model TeacherTable {
  id           Int             @id @default(autoincrement())
  firstname    String
  lastname     String
  email        String          @unique
  password     String
  branchId     Int
  universityId Int
  branch       BranchTable     @relation(fields: [branchId], references: [id])
  university   UniversityTable @relation(fields: [universityId], references: [id])
  tests        TestTable[]
  notes        NotesTable[]
}

model TestTable {
  id            Int                    @id @default(autoincrement())
  title         String
  teacherID     Int
  branchId      Int
  subject       String
  yearId        Int
  totalmarks    Int
  duration      Int // ✅ Duration (in minutes)
  scheduledDate DateTime
  teacher       TeacherTable           @relation(fields: [teacherID], references: [id])
  branch        BranchTable            @relation(fields: [branchId], references: [id])
  year          YearTable              @relation(fields: [yearId], references: [id])
  questions     QuestionsTable[]
  results       ResultTable[]
  responses     StudentResponseTable[]
}

model QuestionsTable {
  id            Int                    @id @default(autoincrement())
  queText       String // ✅ Question text
  optionA       String
  optionB       String
  optionC       String
  optionD       String
  correctOption String // ✅ Correct answer stored as "A", "B", "C", or "D"
  maxMark       Int // ✅ Maximum marks for the question
  testId        Int
  test          TestTable              @relation(fields: [testId], references: [id])
  responses     StudentResponseTable[] // ✅ Added missing inverse relation
}

// model ResultTable {
//   id          Int @id @default(autoincrement())
//   totalmarks  Int
//   scoredmarks Int
//   cheated     Boolean @default(false) // ✅ Added field to track cheating
//   testId      Int
//   studentId   Int
//   test        TestTable  @relation(fields: [testId], references: [id])
//   student     StudentTable @relation(fields: [studentId], references: [id])
// }

model ResultTable {
  id              Int          @id @default(autoincrement())
  totalmarks      Int
  scoredmarks     Int
  cheated         Boolean      @default(false) // ✅ Added field to track cheating
  testId          Int
  studentId       Int
  tabSwitchCount  Int          @default(0) // ✅ Added field to track tab switches
  fullScreenExits Int          @default(0) // ✅ Added field to track fullscreen exits
  maxFaceCount    Int          @default(0) // ✅ Added field to track max detected faces
  test            TestTable    @relation(fields: [testId], references: [id])
  student         StudentTable @relation(fields: [studentId], references: [id])
}

model StudentResponseTable {
  id             Int            @id @default(autoincrement())
  studentId      Int
  testId         Int
  questionId     Int
  selectedOption String // ✅ Stores the student's selected answer ("A", "B", "C", "D")
  isCorrect      Boolean // ✅ Stores whether the selected answer was correct or not
  student        StudentTable   @relation(fields: [studentId], references: [id])
  test           TestTable      @relation(fields: [testId], references: [id])
  question       QuestionsTable @relation(fields: [questionId], references: [id]) // ✅ Fixed relation
}

model NotesTable {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  driveLink   String
  uploadedAt  DateTime @default(now())

  teacherId    Int
  universityId Int
  branchId     Int
  yearId       Int

  teacher    TeacherTable    @relation(fields: [teacherId], references: [id])
  university UniversityTable @relation(fields: [universityId], references: [id])
  branch     BranchTable     @relation(fields: [branchId], references: [id])
  year       YearTable       @relation(fields: [yearId], references: [id])
}
