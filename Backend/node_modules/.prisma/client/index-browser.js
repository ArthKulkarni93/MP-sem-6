
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  detectRuntime,
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.7.0
 * Query Engine version: 79fb5193cf0a8fdbef536e4b4a159cad677ab1b9
 */
Prisma.prismaVersion = {
  client: "5.7.0",
  engine: "79fb5193cf0a8fdbef536e4b4a159cad677ab1b9"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  throw new Error(`Extensions.getExtensionContext is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.defineExtension = () => {
  throw new Error(`Extensions.defineExtension is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UniversityTableScalarFieldEnum = {
  id: 'id',
  name: 'name',
  address: 'address'
};

exports.Prisma.BranchTableScalarFieldEnum = {
  id: 'id',
  Branchcode: 'Branchcode',
  Branchname: 'Branchname',
  universityId: 'universityId'
};

exports.Prisma.YearTableScalarFieldEnum = {
  id: 'id',
  name: 'name',
  year: 'year',
  universityId: 'universityId',
  branchId: 'branchId'
};

exports.Prisma.StudentTableScalarFieldEnum = {
  id: 'id',
  firstname: 'firstname',
  lastname: 'lastname',
  email: 'email',
  password: 'password',
  PRN: 'PRN',
  branchId: 'branchId',
  universityId: 'universityId',
  yearId: 'yearId'
};

exports.Prisma.TeacherTableScalarFieldEnum = {
  id: 'id',
  firstname: 'firstname',
  lastname: 'lastname',
  email: 'email',
  password: 'password',
  branchId: 'branchId',
  universityId: 'universityId'
};

exports.Prisma.TestTableScalarFieldEnum = {
  id: 'id',
  title: 'title',
  teacherID: 'teacherID',
  branchId: 'branchId',
  subject: 'subject',
  yearId: 'yearId',
  totalmarks: 'totalmarks',
  duration: 'duration',
  scheduledDate: 'scheduledDate'
};

exports.Prisma.QuestionsTableScalarFieldEnum = {
  id: 'id',
  queText: 'queText',
  optionA: 'optionA',
  optionB: 'optionB',
  optionC: 'optionC',
  optionD: 'optionD',
  correctOption: 'correctOption',
  maxMark: 'maxMark',
  testId: 'testId'
};

exports.Prisma.ResultTableScalarFieldEnum = {
  id: 'id',
  totalmarks: 'totalmarks',
  scoredmarks: 'scoredmarks',
  cheated: 'cheated',
  testId: 'testId',
  studentId: 'studentId',
  tabSwitchCount: 'tabSwitchCount',
  fullScreenExits: 'fullScreenExits',
  maxFaceCount: 'maxFaceCount'
};

exports.Prisma.StudentResponseTableScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  testId: 'testId',
  questionId: 'questionId',
  selectedOption: 'selectedOption',
  isCorrect: 'isCorrect'
};

exports.Prisma.NotesTableScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  driveLink: 'driveLink',
  uploadedAt: 'uploadedAt',
  teacherId: 'teacherId',
  universityId: 'universityId',
  branchId: 'branchId',
  yearId: 'yearId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};


exports.Prisma.ModelName = {
  UniversityTable: 'UniversityTable',
  BranchTable: 'BranchTable',
  YearTable: 'YearTable',
  StudentTable: 'StudentTable',
  TeacherTable: 'TeacherTable',
  TestTable: 'TestTable',
  QuestionsTable: 'QuestionsTable',
  ResultTable: 'ResultTable',
  StudentResponseTable: 'StudentResponseTable',
  NotesTable: 'NotesTable'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        const runtime = detectRuntime()
        const edgeRuntimeName = {
          'workerd': 'Cloudflare Workers',
          'deno': 'Deno and Deno Deploy',
          'netlify': 'Netlify Edge Functions',
          'edge-light': 'Vercel Edge Functions',
        }[runtime]

        let message = 'PrismaClient is unable to run in '
        if (edgeRuntimeName !== undefined) {
          message += edgeRuntimeName + '. As an alternative, try Accelerate: https://pris.ly/d/accelerate.'
        } else {
          message += 'this browser environment, or has been bundled for the browser (running in `' + runtime + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://github.com/prisma/prisma/issues`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
